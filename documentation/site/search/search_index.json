{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Comunidade Discord <p>\ud83d\udcbb Discord</p> <p>Salas: Ter\u00e7as no Lab4 Principal, Quartas Lab3 Centro</p> Revis\u00e3o de Conceitos Bases Protocolo HTTP e Comunica\u00e7\u00e3o Web <p>O HyperText Transfer Protocol (HTTP) \u00e9 a espinha dorsal da World Wide Web. Ele define como as mensagens s\u00e3o formatadas e transmitidas, e como servidores e navegadores respondem a diferentes comandos. O HTTP usa um modelo cliente-servidor, onde o navegador \u00e9 o cliente e a aplica\u00e7\u00e3o no servidor web \u00e9 o servidor.</p> <p>O diagrama acima ilustra o processo de requisi\u00e7\u00e3o e resposta entre cliente e servidor, fundamental para o funcionamento do HTTP.</p> <p>Verbos HTTP (GET, POST, PUT, DELETE, etc.), URLs e URIs s\u00e3o elementos cruciais para especificar a\u00e7\u00f5es e recursos na comunica\u00e7\u00e3o web.</p> <p>A arquitetura MVC (Model-View-Controller) \u00e9 frequentemente usada em aplica\u00e7\u00f5es web para organizar a l\u00f3gica, apresenta\u00e7\u00e3o e intera\u00e7\u00e3o com o usu\u00e1rio.</p> <p>O m\u00e9todo GET \u00e9 usado para solicitar dados do servidor.</p> <p>O m\u00e9todo POST \u00e9 usado para enviar dados ao servidor para processamento.</p> <p>Outros protocolos importantes na web incluem HTTPS (HTTP seguro), FTP (transfer\u00eancia de arquivos) e WebSocket (comunica\u00e7\u00e3o bidirecional em tempo real).</p> Como a World Wide Web Funciona Entendendo a Web <p>A World Wide Web (WWW) \u00e9 um sistema de documentos interligados acess\u00edveis via Internet. Esses documentos s\u00e3o formatados em HTML (HyperText Markup Language) e podem ser visualizados por navegadores web. A comunica\u00e7\u00e3o na web \u00e9 feita atrav\u00e9s do protocolo HTTP (HyperText Transfer Protocol).</p> <p>Quando um usu\u00e1rio digita um endere\u00e7o web (URL) em um navegador, este envia uma solicita\u00e7\u00e3o HTTP ao servidor onde o site est\u00e1 hospedado. O servidor responde com o c\u00f3digo HTML da p\u00e1gina solicitada, que o navegador renderiza para o usu\u00e1rio. Esse processo permite que informa\u00e7\u00f5es e servi\u00e7os sejam acessados de maneira r\u00e1pida e eficiente.</p> Estrutura do Nosso Projeto /src /controllers - userController.ts - productController.ts /models - userModel.ts - productModel.ts /views - userView.ts - productView.ts /routes - userRoutes.ts - productRoutes.ts /services - userService.ts - productService.ts /config - database.ts - server.ts /middlewares - authMiddleware.ts /utils - helpers.ts - app.ts - server.ts Cronograma de Aulas Data Aula Semana de 06/08 An\u00e1lise de Requisitos e Viabilidade Semana de 13/08 GitFlow e Conventional Commits - Boas Pr\u00e1ticas de Desenvolvimento e Documenta\u00e7\u00e3o (Cria\u00e7\u00e3o do reposit\u00f3rio individual) 0,5 pontos Semana de 20/08 Virtualiza\u00e7\u00e3o, node e Docker (Cria\u00e7\u00e3o de banco de dados postgres com docker compose e ambiente node) Semana de 27/08 Modelagem de banco de dados e Models (Arquiteturas de Softwares em MVC e Padr\u00f5es de Projeto) Semana de 03/09 Rotas e Controllers (Continua\u00e7\u00e3o do MVC) Semana de 10/09 TechWeek Semana de 17/09 Queries SQLs avan\u00e7adas em banco de dados Semana de 24/09 Teste SQL Avan\u00e7ado 2,5 pontos Semana de 01/10 Feriado Semana de 08/10 Helpers e Camadas Auxiliares do MVC Semana de 14/10 Avalia\u00e7\u00e3o Multidisciplinar - 1 ponto Semana de 15/10 III TechWeek Semana de 22/10 Filas com RabbitMQ e controle ass\u00edncrono de requisi\u00e7\u00f5es Semana de 29/10 TDD e testes unit\u00e1rios Semana de 05/11 Deploy com render (web Service + PostgreSQL) Semana de 12/11 Autentica\u00e7\u00e3o com criptografia de usu\u00e1rios Semana de 19/11 Revis\u00e3o e direcionamento de projetos Semana de 26/11 Avalia\u00e7\u00e3o Semestral - Prova (2 pontos) + Projeto (4 pontos)"},{"location":"10_filas_rabbitmq/","title":"Filas com RabbitMQ e Controle Ass\u00edncrono de Requisi\u00e7\u00f5es","text":""},{"location":"11_tdd_testes_unitarios/","title":"TDD e Testes Unit\u00e1rios","text":""},{"location":"12_deploy_render/","title":"Deploy com Render (Web Service + PostgreSQL)","text":""},{"location":"13_autenticacao_criptografia_usuarios/","title":"Autentica\u00e7\u00e3o com Criptografia de Usu\u00e1rios","text":""},{"location":"14_revisao_direcionamento_projetos/","title":"Revis\u00e3o e Direcionamento de Projetos","text":""},{"location":"15_avaliacao_semestral/","title":"Avalia\u00e7\u00e3o Semestral","text":""},{"location":"15_avaliacao_semestral/#topicos","title":"T\u00f3picos:","text":"<ul> <li>Prova (2 pontos) + Projeto (4 pontos)</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/","title":"An\u00e1lise de Requisitos e Viabilidade: Uma Aula Avan\u00e7ada com Desafio Pr\u00e1tico","text":""},{"location":"1_analise_requisitos_viabilidade/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A An\u00e1lise de Requisitos e Viabilidade \u00e9 essencial para o desenvolvimento de qualquer software, incluindo interfaces de usu\u00e1rio (frontend). Ela garante que o produto final atenda \u00e0s necessidades dos usu\u00e1rios e seja vi\u00e1vel dentro das restri\u00e7\u00f5es do projeto. Nesta aula, exploraremos os conceitos e t\u00e9cnicas da An\u00e1lise de Requisitos e Viabilidade aplicados ao desenvolvimento frontend, culminando em um desafio pr\u00e1tico para consolidar seu aprendizado.</p> <p></p>"},{"location":"1_analise_requisitos_viabilidade/#objetivos-de-aprendizagem","title":"Objetivos de Aprendizagem","text":"<p>Ao final desta aula, voc\u00ea ser\u00e1 capaz de:</p> <ul> <li>Compreender a import\u00e2ncia da An\u00e1lise de Requisitos e Viabilidade no desenvolvimento frontend.</li> <li>Identificar e documentar requisitos funcionais, n\u00e3o funcionais e de usabilidade.</li> <li>Realizar an\u00e1lises de viabilidade t\u00e9cnica e de design para interfaces de usu\u00e1rio.</li> <li>Aplicar t\u00e9cnicas de elicita\u00e7\u00e3o e prioriza\u00e7\u00e3o de requisitos em projetos frontend.</li> <li>Utilizar ferramentas e modelos para auxiliar na An\u00e1lise de Requisitos e Viabilidade em frontend.</li> </ul> <p></p>"},{"location":"1_analise_requisitos_viabilidade/#conteudo-da-aula","title":"Conte\u00fado da Aula","text":""},{"location":"1_analise_requisitos_viabilidade/#1-introducao-a-analise-de-requisitos-em-backend","title":"1. Introdu\u00e7\u00e3o \u00e0 An\u00e1lise de Requisitos em Backend","text":"<p>A An\u00e1lise de Requisitos em Backend \u00e9 o alicerce para o desenvolvimento de sistemas robustos e eficientes. Ela envolve a identifica\u00e7\u00e3o, documenta\u00e7\u00e3o e valida\u00e7\u00e3o das necessidades e expectativas dos usu\u00e1rios e stakeholders em rela\u00e7\u00e3o \u00e0 l\u00f3gica, aos dados e \u00e0s funcionalidades internas do sistema.</p>"},{"location":"1_analise_requisitos_viabilidade/#definicao-e-importancia","title":"Defini\u00e7\u00e3o e Import\u00e2ncia","text":"<p>A An\u00e1lise de Requisitos em Backend \u00e9 um processo fundamental que visa entender e definir as regras de neg\u00f3cio, os fluxos de dados e as opera\u00e7\u00f5es que o sistema deve realizar em segundo plano. Ela serve como um guia para o desenvolvimento do backend, garantindo que o sistema:</p> <ul> <li>Funcional: Execute as opera\u00e7\u00f5es necess\u00e1rias para atender \u00e0s necessidades dos usu\u00e1rios e do neg\u00f3cio.</li> <li>Confi\u00e1vel: Processe e armazene dados de forma segura e consistente.</li> <li>Escal\u00e1vel: Suporte o crescimento do n\u00famero de usu\u00e1rios e da quantidade de dados sem comprometer o desempenho.</li> <li>Manuten\u00edvel: Seja f\u00e1cil de atualizar e modificar para atender a novas demandas.</li> <li>Integr\u00e1vel: Comunique-se de forma eficiente com outros sistemas e componentes.</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#tipos-de-requisitos","title":"Tipos de Requisitos","text":"<p>Os requisitos em backend podem ser classificados em tr\u00eas categorias principais:</p>"},{"location":"1_analise_requisitos_viabilidade/#requisitos-funcionais","title":"Requisitos Funcionais","text":"<p>Descrevem as funcionalidades internas que o sistema deve oferecer para suportar as intera\u00e7\u00f5es do usu\u00e1rio e as regras de neg\u00f3cio. S\u00e3o a\u00e7\u00f5es que o sistema deve realizar em segundo plano, como:</p> <ul> <li>Processamento de dados: Calcular valores, validar informa\u00e7\u00f5es, transformar dados.</li> <li>Gerenciamento de dados: Armazenar, recuperar, atualizar e excluir dados em bancos de dados.</li> <li>Comunica\u00e7\u00e3o: Trocar informa\u00e7\u00f5es com outros sistemas ou componentes atrav\u00e9s de APIs.</li> <li>Autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o: Controlar o acesso aos recursos do sistema.</li> <li>L\u00f3gica de neg\u00f3cio: Implementar as regras e pol\u00edticas que regem o funcionamento do sistema.</li> </ul> <p>Exemplos de requisitos funcionais:</p> <ul> <li>\"O sistema deve calcular o valor total de um pedido com base nos produtos e quantidades.\"</li> <li>\"O sistema deve validar o formato de um endere\u00e7o de e-mail antes de permitir o cadastro.\"</li> <li>\"O sistema deve gerar um relat\u00f3rio mensal de vendas.\"</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#requisitos-nao-funcionais","title":"Requisitos N\u00e3o Funcionais","text":"<p>Abrangem aspectos que n\u00e3o est\u00e3o diretamente relacionados \u00e0s funcionalidades do backend, mas que s\u00e3o essenciais para a qualidade e o desempenho do sistema. Incluem caracter\u00edsticas como:</p> <ul> <li>Desempenho: Tempo de resposta das opera\u00e7\u00f5es, capacidade de processamento de dados.</li> <li>Seguran\u00e7a: Prote\u00e7\u00e3o contra ataques cibern\u00e9ticos, criptografia de dados sens\u00edveis.</li> <li>Escalabilidade: Capacidade de lidar com um aumento no n\u00famero de usu\u00e1rios e na quantidade de dados.</li> <li>Disponibilidade: Tempo em que o sistema est\u00e1 dispon\u00edvel para uso.</li> <li>Manutenibilidade: Facilidade de atualizar e modificar o c\u00f3digo do sistema.</li> </ul> <p>Exemplos de requisitos n\u00e3o funcionais:</p> <ul> <li>\"O tempo de resposta de cada opera\u00e7\u00e3o n\u00e3o deve exceder 1 segundo.\"</li> <li>\"O sistema deve ser capaz de processar 10.000 transa\u00e7\u00f5es por minuto.\"</li> <li>\"O sistema deve estar dispon\u00edvel 24 horas por dia, 7 dias por semana.\"</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<p>Definem as pol\u00edticas e restri\u00e7\u00f5es que regem o funcionamento do sistema e como ele deve responder a diferentes eventos. S\u00e3o derivadas das necessidades do neg\u00f3cio e podem ser expressas em linguagem natural ou em uma linguagem de modelagem.</p> <p>Exemplos de regras de neg\u00f3cio:</p> <ul> <li>\"Um cliente s\u00f3 pode ter um pedido em aberto por vez.\"</li> <li>\"O desconto m\u00e1ximo permitido em um produto \u00e9 de 30%.\"</li> <li>\"Um usu\u00e1rio s\u00f3 pode acessar determinadas \u00e1reas do sistema se tiver permiss\u00e3o de administrador.\"</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#tecnicas-de-elicitacao","title":"T\u00e9cnicas de Elicita\u00e7\u00e3o","text":"<p>A elicita\u00e7\u00e3o de requisitos em backend envolve a coleta de informa\u00e7\u00f5es de diversas fontes, como:</p> <ul> <li>Stakeholders: Entrevistas com usu\u00e1rios, gerentes de produto, especialistas de dom\u00ednio e outros envolvidos no projeto.</li> <li>Documenta\u00e7\u00e3o existente: An\u00e1lise de documentos como manuais de usu\u00e1rio, especifica\u00e7\u00f5es t\u00e9cnicas e relat\u00f3rios de requisitos de sistemas similares.</li> <li>An\u00e1lise de sistemas legados: Estudo de sistemas existentes que ser\u00e3o substitu\u00eddos ou integrados ao novo sistema.</li> <li>Workshops e brainstorming: Sess\u00f5es colaborativas para gerar ideias e identificar requisitos.</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#documentacao-de-requisitos","title":"Documenta\u00e7\u00e3o de Requisitos","text":"<p>A documenta\u00e7\u00e3o de requisitos em backend deve ser clara, concisa e organizada. Algumas formas comuns de documentar requisitos em backend s\u00e3o:</p> <ul> <li>Casos de uso: Descrevem as intera\u00e7\u00f5es entre os atores (usu\u00e1rios, sistemas externos) e o sistema para alcan\u00e7ar um objetivo espec\u00edfico.</li> <li>Hist\u00f3rias de usu\u00e1rio: Descri\u00e7\u00f5es concisas e em linguagem natural das funcionalidades desejadas do ponto de vista do usu\u00e1rio.</li> <li>Diagramas de sequ\u00eancia: Representa\u00e7\u00f5es visuais da sequ\u00eancia de mensagens trocadas entre os objetos do sistema.</li> <li>Diagramas de classe: Representa\u00e7\u00f5es visuais da estrutura e das rela\u00e7\u00f5es entre as classes do sistema.</li> <li>Especifica\u00e7\u00f5es de API: Descri\u00e7\u00f5es detalhadas das interfaces de programa\u00e7\u00e3o de aplicativos (APIs) que o sistema oferece.</li> </ul> <p>Ao dominar a An\u00e1lise de Requisitos em Backend, voc\u00ea estar\u00e1 apto a construir sistemas robustos, eficientes e que atendam \u00e0s necessidades do neg\u00f3cio e dos usu\u00e1rios de forma eficaz.</p>"},{"location":"1_analise_requisitos_viabilidade/#2-analise-de-viabilidade-em-backend","title":"2. An\u00e1lise de Viabilidade em Backend","text":"<p>A An\u00e1lise de Viabilidade em Backend \u00e9 o processo de avaliar se os requisitos identificados na etapa anterior s\u00e3o realistas e podem ser implementados com sucesso, considerando as restri\u00e7\u00f5es t\u00e9cnicas, de tempo, de custo e de recursos dispon\u00edveis.</p>"},{"location":"1_analise_requisitos_viabilidade/#viabilidade-tecnica","title":"Viabilidade T\u00e9cnica","text":"<p>A viabilidade t\u00e9cnica avalia se os requisitos podem ser implementados com as tecnologias, ferramentas e conhecimentos dispon\u00edveis. \u00c9 importante considerar:</p> <ul> <li>Tecnologias: As linguagens de programa\u00e7\u00e3o, frameworks, bancos de dados e outras tecnologias escolhidas para o projeto s\u00e3o adequadas para atender aos requisitos? Elas oferecem o desempenho, a seguran\u00e7a e a escalabilidade necess\u00e1rios?</li> <li>Ferramentas: As ferramentas de desenvolvimento, como IDEs, depuradores e ferramentas de teste, s\u00e3o suficientes para construir e manter o sistema?</li> <li>Equipe: A equipe de desenvolvimento possui as habilidades e a experi\u00eancia necess\u00e1rias para trabalhar com as tecnologias escolhidas e implementar os requisitos?</li> <li>Infraestrutura: A infraestrutura de hardware e software dispon\u00edvel (servidores, redes, sistemas operacionais) \u00e9 capaz de suportar o sistema em produ\u00e7\u00e3o?</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#viabilidade-de-design","title":"Viabilidade de Design","text":"<p>A viabilidade de design avalia se os requisitos podem ser implementados de forma eficiente, escal\u00e1vel e manuten\u00edvel. \u00c9 importante considerar:</p> <ul> <li>Arquitetura: A arquitetura do sistema (monol\u00edtica, microsservi\u00e7os, etc.) \u00e9 adequada para atender aos requisitos de desempenho, escalabilidade e flexibilidade?</li> <li>Design de dados: O modelo de dados escolhido (relacional, NoSQL, etc.) \u00e9 adequado para armazenar e recuperar os dados do sistema de forma eficiente?</li> <li>Design de c\u00f3digo: O c\u00f3digo do sistema segue boas pr\u00e1ticas de programa\u00e7\u00e3o, como modularidade, coes\u00e3o e baixo acoplamento? Isso facilita a manuten\u00e7\u00e3o e evolu\u00e7\u00e3o do sistema.</li> <li>Padr\u00f5es de projeto: O uso de padr\u00f5es de projeto estabelecidos pode ajudar a resolver problemas comuns de design e melhorar a qualidade do c\u00f3digo.</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#ferramentas-e-metodos","title":"Ferramentas e M\u00e9todos","text":"<p>Existem diversas ferramentas e m\u00e9todos que podem auxiliar na an\u00e1lise de viabilidade em backend:</p> <ul> <li>Provas de conceito (PoCs): Implementa\u00e7\u00f5es em pequena escala de funcionalidades cr\u00edticas para validar a viabilidade t\u00e9cnica e testar diferentes abordagens.</li> <li>An\u00e1lise de riscos: Identifica\u00e7\u00e3o e avalia\u00e7\u00e3o dos riscos t\u00e9cnicos que podem impactar o projeto, como a falta de experi\u00eancia da equipe com uma determinada tecnologia ou a depend\u00eancia de componentes externos.</li> <li>Estimativas de esfor\u00e7o: C\u00e1lculo do tempo e dos recursos necess\u00e1rios para implementar os requisitos, considerando a complexidade das tarefas e a experi\u00eancia da equipe.</li> <li>An\u00e1lise de custos: Estimativa dos custos de desenvolvimento, incluindo licen\u00e7as de software, hardware, infraestrutura e sal\u00e1rios da equipe.</li> </ul> <p>Ao realizar uma an\u00e1lise de viabilidade completa, voc\u00ea pode tomar decis\u00f5es informadas sobre a implementa\u00e7\u00e3o dos requisitos, identificar e mitigar riscos e garantir que o projeto seja entregue com sucesso, dentro do prazo e do or\u00e7amento.</p>"},{"location":"1_analise_requisitos_viabilidade/#3-priorizacao-de-requisitos-em-backend","title":"3. Prioriza\u00e7\u00e3o de Requisitos em Backend","text":"<p>A Prioriza\u00e7\u00e3o de Requisitos em Backend \u00e9 o processo de organizar e classificar os requisitos identificados de acordo com sua import\u00e2ncia e impacto no projeto. Essa etapa \u00e9 crucial para garantir que os recursos sejam alocados de forma eficiente e que as funcionalidades mais importantes sejam desenvolvidas e entregues primeiro.</p>"},{"location":"1_analise_requisitos_viabilidade/#importancia-da-priorizacao","title":"Import\u00e2ncia da Prioriza\u00e7\u00e3o","text":"<p>A prioriza\u00e7\u00e3o de requisitos oferece diversos benef\u00edcios para o projeto:</p> <ul> <li>Foco: Permite que a equipe de desenvolvimento se concentre nas funcionalidades mais importantes, evitando dispers\u00e3o de esfor\u00e7os.</li> <li>Gerenciamento de expectativas: Ajuda a alinhar as expectativas dos stakeholders em rela\u00e7\u00e3o ao que ser\u00e1 entregue em cada fase do projeto.</li> <li>Tomada de decis\u00f5es: Facilita a tomada de decis\u00f5es sobre quais requisitos devem ser implementados primeiro, caso haja restri\u00e7\u00f5es de tempo ou recursos.</li> <li>Flexibilidade: Permite que o projeto se adapte a mudan\u00e7as nas prioridades do neg\u00f3cio ou nas necessidades dos usu\u00e1rios.</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#criterios-de-priorizacao","title":"Crit\u00e9rios de Prioriza\u00e7\u00e3o","text":"<p>Existem diversos crit\u00e9rios que podem ser utilizados para priorizar os requisitos em backend:</p> <ul> <li>Valor de neg\u00f3cio: Qual o impacto do requisito no sucesso do neg\u00f3cio? Ele gera receita, reduz custos, melhora a efici\u00eancia ou aumenta a satisfa\u00e7\u00e3o do cliente?</li> <li>Urg\u00eancia: Qual a necessidade de implementar o requisito em curto prazo? Ele \u00e9 essencial para o lan\u00e7amento do produto ou para atender a uma demanda urgente do mercado?</li> <li>Risco: Qual o risco de n\u00e3o implementar o requisito? Ele pode causar problemas de seguran\u00e7a, perda de dados, insatisfa\u00e7\u00e3o do cliente ou impacto negativo na imagem da empresa?</li> <li>Custo: Qual o custo de implementar o requisito? Ele requer recursos adicionais, como tempo, dinheiro ou m\u00e3o de obra especializada?</li> <li>Depend\u00eancias: O requisito depende de outros requisitos para ser implementado? Ele \u00e9 um pr\u00e9-requisito para outras funcionalidades?</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#tecnicas-de-priorizacao","title":"T\u00e9cnicas de Prioriza\u00e7\u00e3o","text":"<p>Existem diversas t\u00e9cnicas que podem ser utilizadas para priorizar os requisitos em backend:</p> <ul> <li>MoSCoW: Classifica os requisitos em quatro categorias:<ul> <li>Must Have: Requisitos essenciais para o sucesso do projeto.</li> <li>Should Have: Requisitos importantes, mas n\u00e3o essenciais.</li> <li>Could Have: Requisitos desej\u00e1veis, mas que podem ser adiados.</li> <li>Won't Have: Requisitos que n\u00e3o ser\u00e3o implementados nesta vers\u00e3o do projeto.</li> </ul> </li> <li>Kano: Analisa a satisfa\u00e7\u00e3o do cliente em rela\u00e7\u00e3o aos requisitos, classificando-os em cinco categorias:<ul> <li>Obrigat\u00f3rios: Requisitos b\u00e1sicos que, se n\u00e3o forem atendidos, causam insatisfa\u00e7\u00e3o.</li> <li>Unidimensionais: Requisitos que, quanto mais presentes, mais satisfa\u00e7\u00e3o geram.</li> <li>Atraentes: Requisitos que surpreendem e encantam o cliente.</li> <li>Indiferentes: Requisitos que n\u00e3o geram nem satisfa\u00e7\u00e3o nem insatisfa\u00e7\u00e3o.</li> <li>Reversos: Requisitos que, quanto mais presentes, mais insatisfa\u00e7\u00e3o geram.</li> </ul> </li> <li>Matriz de Prioriza\u00e7\u00e3o: Atribui pesos aos crit\u00e9rios de prioriza\u00e7\u00e3o e calcula uma pontua\u00e7\u00e3o para cada requisito, permitindo orden\u00e1-los por ordem de import\u00e2ncia.</li> </ul> <p>A escolha da t\u00e9cnica de prioriza\u00e7\u00e3o depender\u00e1 do contexto do projeto, dos crit\u00e9rios de prioriza\u00e7\u00e3o definidos e das prefer\u00eancias da equipe de desenvolvimento. \u00c9 importante envolver os stakeholders nesse processo para garantir que as prioridades estejam alinhadas com as necessidades do neg\u00f3cio e dos usu\u00e1rios.</p>"},{"location":"1_analise_requisitos_viabilidade/#4-ferramentas-e-modelos-para-backend","title":"4. Ferramentas e Modelos para Backend","text":"<p>A An\u00e1lise de Requisitos em Backend se beneficia de uma variedade de ferramentas e modelos que auxiliam na organiza\u00e7\u00e3o, visualiza\u00e7\u00e3o e comunica\u00e7\u00e3o dos requisitos, al\u00e9m de facilitar o processo de desenvolvimento e manuten\u00e7\u00e3o do sistema.</p>"},{"location":"1_analise_requisitos_viabilidade/#ferramentas-para-backend","title":"Ferramentas para Backend","text":"<ul> <li>Ferramentas de gerenciamento de projetos:<ul> <li>Jira: Permite o acompanhamento de tarefas, bugs e issues, facilitando a organiza\u00e7\u00e3o e o planejamento do desenvolvimento.</li> <li>Trello: Oferece um quadro visual para organizar tarefas e acompanhar o progresso do projeto.</li> <li>Asana: Permite a cria\u00e7\u00e3o de projetos, tarefas e subtarefas, al\u00e9m de facilitar a colabora\u00e7\u00e3o entre equipes.</li> </ul> </li> <li>Ferramentas de documenta\u00e7\u00e3o:<ul> <li>Confluence: Plataforma colaborativa para criar, compartilhar e organizar documentos, como especifica\u00e7\u00f5es de requisitos, diagramas e manuais.</li> <li>Swagger: Ferramenta para documentar APIs REST, facilitando a compreens\u00e3o e o uso da interface do sistema por outros desenvolvedores.</li> </ul> </li> <li>Ferramentas de modelagem de dados:<ul> <li>MySQL Workbench: Ambiente visual para projetar, modelar e gerenciar bancos de dados MySQL.</li> <li>DBeaver: Ferramenta universal para gerenciar e explorar diversos tipos de bancos de dados.</li> <li>ER Studio: Software para modelagem de dados que permite criar diagramas entidade-relacionamento (ER) e gerar scripts SQL.</li> </ul> </li> <li>Ferramentas de teste:<ul> <li>Postman: Ferramenta para testar APIs REST, enviando requisi\u00e7\u00f5es e analisando as respostas.</li> <li>JMeter: Ferramenta para realizar testes de carga e desempenho em aplica\u00e7\u00f5es web e APIs.</li> <li>SoapUI: Ferramenta para testar APIs SOAP, permitindo criar e executar testes funcionais e de seguran\u00e7a.</li> </ul> </li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#modelos-para-backend","title":"Modelos para Backend","text":"<ul> <li>Diagramas de Caso de Uso (UML): Representam as intera\u00e7\u00f5es entre os atores (usu\u00e1rios, sistemas externos) e o sistema para alcan\u00e7ar um objetivo espec\u00edfico.</li> <li>Diagramas de Sequ\u00eancia (UML): Ilustram a ordem temporal das mensagens trocadas entre os objetos do sistema durante a execu\u00e7\u00e3o de um caso de uso.</li> <li>Diagramas de Classe (UML): Representam a estrutura est\u00e1tica do sistema, mostrando as classes, seus atributos e m\u00e9todos, e as rela\u00e7\u00f5es entre elas.</li> <li>Diagramas de Entidade-Relacionamento (ER): Modelam a estrutura de dados do sistema, mostrando as entidades, seus atributos e os relacionamentos entre elas.</li> <li>Diagramas de Fluxo de Dados (DFD): Representam o fluxo de dados atrav\u00e9s do sistema, mostrando os processos, os armazenamentos de dados e as entidades externas.</li> </ul> <p>A escolha das ferramentas e modelos adequados depender\u00e1 das necessidades e prefer\u00eancias da equipe de desenvolvimento, bem como das caracter\u00edsticas do projeto. A utiliza\u00e7\u00e3o dessas ferramentas e modelos pode agilizar o processo de desenvolvimento, facilitar a comunica\u00e7\u00e3o entre os membros da equipe e garantir a qualidade do produto final.</p>"},{"location":"1_analise_requisitos_viabilidade/#desafio-final-analise-de-requisitos-para-um-modulo-backend","title":"Desafio Final: An\u00e1lise de Requisitos para um M\u00f3dulo Backend","text":"<p>Cen\u00e1rio:</p> <p>Voc\u00ea faz parte da equipe de desenvolvimento de um novo sistema web. Sua tarefa \u00e9 realizar a An\u00e1lise de Requisitos para um m\u00f3dulo backend espec\u00edfico.</p> <p>Tarefas:</p> <ol> <li>Escolha do M\u00f3dulo: Selecione um m\u00f3dulo backend do sistema (ex: autentica\u00e7\u00e3o de usu\u00e1rios, gerenciamento de produtos, processamento de pagamentos).</li> <li>Elicita\u00e7\u00e3o de Requisitos: Entreviste usu\u00e1rios, stakeholders e especialistas de dom\u00ednio para coletar requisitos funcionais, n\u00e3o funcionais, regras de neg\u00f3cio, requisitos de usu\u00e1rio e requisitos de sistema para o m\u00f3dulo escolhido.</li> <li>Documenta\u00e7\u00e3o de Requisitos: Documente os requisitos elicitados de forma clara e organizada, utilizando casos de uso, hist\u00f3rias de usu\u00e1rio, diagramas de sequ\u00eancia, diagramas de classe ou outros modelos adequados. Classifique os requisitos em suas respectivas categorias.</li> <li>An\u00e1lise de Viabilidade: Avalie a viabilidade t\u00e9cnica e de design dos requisitos, considerando as tecnologias dispon\u00edveis (linguagens de programa\u00e7\u00e3o, frameworks, bancos de dados), as restri\u00e7\u00f5es de infraestrutura e os padr\u00f5es de projeto aplic\u00e1veis.</li> <li>Prioriza\u00e7\u00e3o de Requisitos: Priorize os requisitos de acordo com sua import\u00e2ncia para o projeto, utilizando t\u00e9cnicas como MoSCoW, Kano ou matriz de prioriza\u00e7\u00e3o, levando em considera\u00e7\u00e3o o valor de neg\u00f3cio, a urg\u00eancia, o risco e o custo de cada requisito.</li> </ol> <p>Entrega:</p> <p>Crie um reposit\u00f3rio no GitHub para o projeto e adicione um arquivo README.md com a documenta\u00e7\u00e3o completa da An\u00e1lise de Requisitos. Inclua:</p> <ul> <li>Descri\u00e7\u00e3o detalhada do m\u00f3dulo backend escolhido.</li> <li>Lista completa dos requisitos elicitados, classificados por tipo (funcional, n\u00e3o funcional, regras de neg\u00f3cio, requisitos de usu\u00e1rio, requisitos de sistema).</li> <li>An\u00e1lise de viabilidade t\u00e9cnica e de design, incluindo justificativas para as escolhas tecnol\u00f3gicas e de arquitetura.</li> <li>Prioriza\u00e7\u00e3o dos requisitos, com explica\u00e7\u00e3o dos crit\u00e9rios utilizados e da ordem de import\u00e2ncia estabelecida.</li> <li>Diagramas ou modelos que auxiliem na compreens\u00e3o dos requisitos e do funcionamento do m\u00f3dulo (opcional).</li> </ul> <p>Avalia\u00e7\u00e3o:</p> <p>Sua entrega ser\u00e1 avaliada individualmente, considerando:</p> <ul> <li>A qualidade e completude da elicita\u00e7\u00e3o e documenta\u00e7\u00e3o dos requisitos.</li> <li>A profundidade e a pertin\u00eancia da an\u00e1lise de viabilidade.</li> <li>A coer\u00eancia e a justificativa da prioriza\u00e7\u00e3o dos requisitos.</li> <li>A clareza e a organiza\u00e7\u00e3o da documenta\u00e7\u00e3o.</li> <li>O uso adequado de ferramentas e modelos para representar os requisitos.</li> </ul> <p>Este desafio pr\u00e1tico permitir\u00e1 que voc\u00ea aplique os conceitos e t\u00e9cnicas aprendidos em um cen\u00e1rio real de desenvolvimento backend, preparando voc\u00ea para os desafios do mercado de trabalho.</p>"},{"location":"1_analise_requisitos_viabilidade/#tarefa-em-sala-de-aula","title":"Tarefa em sala de Aula","text":"<ul> <li>Crie seu github se n\u00e3o tiver</li> <li>Crie o reposit\u00f3rio de backend para web</li> <li>Vamos criar a estrutura inicial e deixar preparado para a entrega de 0,5 pontos.</li> </ul>"},{"location":"2_gitflow_conventional_commits/","title":"Aula B\u00e1sica de Git via Terminal","text":""},{"location":"2_gitflow_conventional_commits/#o-que-e-git","title":"O que \u00e9 Git?","text":"<p>Git \u00e9 um sistema de controle de vers\u00e3o distribu\u00eddo, amplamente utilizado para rastrear mudan\u00e7as no c\u00f3digo-fonte durante o desenvolvimento de software. Ele permite que m\u00faltiplos desenvolvedores trabalhem simultaneamente em um projeto sem conflitos.</p>"},{"location":"2_gitflow_conventional_commits/#instalacao-do-git","title":"Instala\u00e7\u00e3o do Git","text":""},{"location":"2_gitflow_conventional_commits/#no-windows","title":"No Windows:","text":"<ol> <li>Baixe o instalador do Git em git-scm.com.</li> <li>Execute o instalador e siga as instru\u00e7\u00f5es.</li> </ol>"},{"location":"2_gitflow_conventional_commits/#no-macos","title":"No macOS:","text":"<pre><code>brew install git\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#no-linux-ubuntudebian","title":"No Linux (Ubuntu/Debian):","text":"<pre><code>sudo apt-get install git\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#mas-nos-iremos-fazer-no-replitcom","title":"Mas n\u00f3s iremos fazer no Replit.com","text":"<ol> <li>V\u00e1 ao repli.com</li> <li>Fa\u00e7a seu cadastro com o github!</li> <li>Inicie uma m\u00e1quina para Typescript</li> <li>No shell fa\u00e7a \"gh auth login\" e ele vai perguntar se voc\u00ea precisa instalar o gh</li> <li>Ap\u00f3s a instala\u00e7\u00e3o, digite novamente <code>gh auth login</code> e fa\u00e7a o login com o github em https</li> </ol>"},{"location":"2_gitflow_conventional_commits/#configuracao-inicial","title":"Configura\u00e7\u00e3o Inicial","text":"<p>Ap\u00f3s instalar o Git, voc\u00ea precisa configurar seu nome de usu\u00e1rio e e-mail:</p> <pre><code>git config --global user.name \"Seu Nome\"\ngit config --global user.email \"seu.email@exemplo.com\"\n</code></pre> <p></p>"},{"location":"2_gitflow_conventional_commits/#comandos-basicos-do-git","title":"Comandos B\u00e1sicos do Git","text":""},{"location":"2_gitflow_conventional_commits/#1-git-init","title":"1. <code>git init</code>","text":"<p>Inicializa um novo reposit\u00f3rio Git no diret\u00f3rio atual.</p> <pre><code>git init\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#2-git-clone","title":"2. <code>git clone</code>","text":"<p>Clona um reposit\u00f3rio remoto para o diret\u00f3rio local.</p> <pre><code>git clone https://github.com/usuario/repo.git\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#3-git-status","title":"3. <code>git status</code>","text":"<p>Exibe o status dos arquivos no diret\u00f3rio de trabalho e no \u00edndice.</p> <pre><code>git status\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#4-git-add","title":"4. <code>git add</code>","text":"<p>Adiciona arquivos ao \u00edndice (staging area).</p> <pre><code>git add nome_do_arquivo\n# Ou para adicionar todos os arquivos alterados:\ngit add .\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#5-git-commit","title":"5. <code>git commit</code>","text":"<p>Grava as mudan\u00e7as do \u00edndice no reposit\u00f3rio local.</p> <pre><code>git commit -m \"Mensagem descritiva sobre a mudan\u00e7a\"\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#6-git-push","title":"6. <code>git push</code>","text":"<p>Envia as mudan\u00e7as do reposit\u00f3rio local para o reposit\u00f3rio remoto.</p> <pre><code>git push origin nome_da_branch\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#7-git-pull","title":"7. <code>git pull</code>","text":"<p>Atualiza o reposit\u00f3rio local com as mudan\u00e7as do reposit\u00f3rio remoto.</p> <pre><code>git pull origin nome_da_branch\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#8-git-branch","title":"8. <code>git branch</code>","text":"<p>Lista todas as branches no reposit\u00f3rio. Para criar uma nova branch:</p> <pre><code>git branch nome_da_nova_branch\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#9-git-checkout","title":"9. <code>git checkout</code>","text":"<p>Muda para uma branch espec\u00edfica.</p> <pre><code>git checkout nome_da_branch\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#10-git-merge","title":"10. <code>git merge</code>","text":"<p>Mescla uma branch na branch atual.</p> <pre><code>git merge nome_da_branch\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#conventional-commits","title":"Conventional Commits","text":"<p>Conventional Commits \u00e9 uma conven\u00e7\u00e3o para escrever mensagens de commit que facilita a leitura e entendimento do hist\u00f3rico de commits. Uma mensagem de commit convencional tem a seguinte estrutura:</p> <pre><code>tipo(escopo opcional): descri\u00e7\u00e3o\n\n[corpo opcional]\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#tipos-comuns-de-commits","title":"Tipos Comuns de Commits","text":"<ul> <li>feat: Uma nova funcionalidade.</li> <li>fix: Corre\u00e7\u00e3o de bug.</li> <li>docs: Mudan\u00e7as na documenta\u00e7\u00e3o.</li> <li>style: Mudan\u00e7as que n\u00e3o afetam o significado do c\u00f3digo (espa\u00e7os em branco, formata\u00e7\u00e3o, etc).</li> <li>refactor: Mudan\u00e7a de c\u00f3digo que n\u00e3o corrige um bug nem adiciona uma funcionalidade.</li> <li>test: Adi\u00e7\u00e3o ou corre\u00e7\u00e3o de testes.</li> <li>chore: Mudan\u00e7as no processo de build ou ferramentas auxiliares e bibliotecas.</li> </ul>"},{"location":"2_gitflow_conventional_commits/#exemplo-de-conventional-commit","title":"Exemplo de Conventional Commit","text":"<pre><code>git commit -m \"feat(login): adicionar autentica\u00e7\u00e3o de usu\u00e1rio\"\n</code></pre>"},{"location":"2_gitflow_conventional_commits/#passo-a-passo-para-treinar-commits","title":"Passo a Passo para Treinar Commits","text":"<ol> <li> <p>Clonar o reposit\u00f3rio (se ainda n\u00e3o estiver clonado):     <code>sh     git clone https://github.com/usuario/repo.git</code></p> </li> <li> <p>Criar uma nova branch para sua feature ou corre\u00e7\u00e3o:     <code>sh     git checkout -b minha_feature</code></p> </li> <li> <p>Fazer mudan\u00e7as no c\u00f3digo.</p> </li> <li> <p>Adicionar os arquivos alterados ao \u00edndice:     <code>sh     git add .</code></p> </li> <li> <p>Escrever uma mensagem de commit usando Conventional Commits:     <code>sh     git commit -m \"feat(minha_feature): adicionar nova funcionalidade de exemplo\"</code></p> </li> <li> <p>Enviar as mudan\u00e7as para o reposit\u00f3rio remoto:     <code>sh     git push origin minha_feature</code></p> </li> <li> <p>Criar um Pull Request no reposit\u00f3rio remoto para mesclar suas mudan\u00e7as na branch principal.</p> </li> </ol> <p>documenta\u00e7\u00e3o oficial do Git.</p>"},{"location":"2_gitflow_conventional_commits/#commit-perfeito","title":"Commit Perfeito?","text":""},{"location":"2_gitflow_conventional_commits/#entendendo-git","title":"Entendendo GIT","text":""},{"location":"2_gitflow_conventional_commits/#git-flow","title":"GIT Flow","text":""},{"location":"2_gitflow_conventional_commits/#git-project-setup-with-husky-conventional-commits-and-branching-strategies","title":"Git Project Setup with Husky, Conventional Commits, and branching strategies","text":""},{"location":"2_gitflow_conventional_commits/#write-git-commit-messages-like-a-pro-with-conventional-commits","title":"Write git commit messages like a PRO with Conventional Commits","text":""},{"location":"2_gitflow_conventional_commits/#trabalhando-em-equipe-com-git-flow","title":"Trabalhando em equipe com Git Flow","text":""},{"location":"3_virtualizacao_node_docker/","title":"Virtualiza\u00e7\u00e3o, Node e Docker","text":""},{"location":"3_virtualizacao_node_docker/#parte-1-introducao-a-virtualizacao","title":"Parte 1: Introdu\u00e7\u00e3o \u00e0 Virtualiza\u00e7\u00e3o","text":""},{"location":"3_virtualizacao_node_docker/#11-o-que-e-virtualizacao","title":"1.1 O que \u00e9 Virtualiza\u00e7\u00e3o?","text":"<ul> <li>Defini\u00e7\u00e3o: Virtualiza\u00e7\u00e3o \u00e9 a cria\u00e7\u00e3o de uma vers\u00e3o virtual de algo, como hardware, sistema operacional, armazenamento ou recursos de rede.</li> <li>Tipos de Virtualiza\u00e7\u00e3o:</li> <li>Virtualiza\u00e7\u00e3o de Servidor: Uso de m\u00e1quinas virtuais (VMs) para executar m\u00faltiplos sistemas operacionais em um \u00fanico servidor f\u00edsico.</li> <li>Virtualiza\u00e7\u00e3o de Desktop: Fornece desktops virtuais para usu\u00e1rios finais.</li> <li>Virtualiza\u00e7\u00e3o de Rede: Combina recursos de rede em um \u00fanico recurso virtualizado.</li> </ul>"},{"location":"3_virtualizacao_node_docker/#12-beneficios-da-virtualizacao","title":"1.2 Benef\u00edcios da Virtualiza\u00e7\u00e3o","text":"<ul> <li>Efici\u00eancia de Recursos: Melhor utiliza\u00e7\u00e3o do hardware.</li> <li>Isolamento: VMs s\u00e3o isoladas umas das outras, aumentando a seguran\u00e7a.</li> <li>Facilidade de Gerenciamento: Facilita o backup, recupera\u00e7\u00e3o e migra\u00e7\u00e3o de sistemas.</li> </ul>"},{"location":"3_virtualizacao_node_docker/#13-ferramentas-de-virtualizacao-popular","title":"1.3 Ferramentas de Virtualiza\u00e7\u00e3o Popular","text":"<ul> <li>VMware: Solu\u00e7\u00e3o l\u00edder em virtualiza\u00e7\u00e3o de servidores.</li> <li>VirtualBox: Ferramenta de virtualiza\u00e7\u00e3o de c\u00f3digo aberto.</li> <li>Hyper-V: Tecnologia de virtualiza\u00e7\u00e3o da Microsoft.</li> </ul>"},{"location":"3_virtualizacao_node_docker/#vamos-utilizar-o-perplexityai-para-fazer-os-passos-a-seguir","title":"Vamos utilizar o Perplexity.ai para fazer os passos a seguir:","text":"<ol> <li>Criar um Dockerfile e um app.ts que retorne um \"Oi, Mundo!\"</li> <li>Atualizar o app.ts para se conectar com um banco de dados postgres</li> <li>Criar o docker-compose.yml para subir os dois juntos!</li> </ol>    Alerta de \u00faltima dia para postar seu reposit\u00f3rio no forms!  <p>link do forms</p>"},{"location":"4_modelagem_bd_models/","title":"Modelagem de Banco de Dados e Models","text":"<p>Para criar um tutorial completo de modelagem de banco de dados utilizando o JSON Server Generator e DBeaver, al\u00e9m de exemplos de SQL do b\u00e1sico ao avan\u00e7ado, siga os passos abaixo. Este tutorial inclui a configura\u00e7\u00e3o de um ambiente com Docker e PostgreSQL, bem como uma explica\u00e7\u00e3o das linguagens DDL e DML em SQL.</p>"},{"location":"4_modelagem_bd_models/#introducao-as-linguagens-ddl-e-dml","title":"Introdu\u00e7\u00e3o \u00e0s Linguagens DDL e DML","text":"<p>DDL (Data Definition Language): DDL \u00e9 a parte do SQL que permite definir e modificar a estrutura dos objetos do banco de dados, como tabelas e \u00edndices. Comandos DDL incluem <code>CREATE</code>, <code>ALTER</code>, e <code>DROP</code>.</p> <p>DML (Data Manipulation Language): DML \u00e9 a parte do SQL usada para manipular os dados dentro das estruturas definidas. Comandos DML incluem <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, e <code>SELECT</code>.</p>"},{"location":"4_modelagem_bd_models/#modelagem-de-banco-de-dados","title":"Modelagem de Banco de Dados","text":""},{"location":"4_modelagem_bd_models/#1-modelagem-de-dados","title":"1. Modelagem de Dados","text":"<ul> <li>Modelo Conceitual: Identifique as entidades e os relacionamentos. Exemplo: Alunos, Professores, Cursos.</li> <li>Modelo L\u00f3gico: Defina os atributos, chaves prim\u00e1rias e estrangeiras para cada entidade.</li> <li>Modelo F\u00edsico: Converta o modelo l\u00f3gico em tabelas no banco de dados.</li> </ul>"},{"location":"4_modelagem_bd_models/#2-json-server-generator","title":"2. JSON Server Generator","text":"<p>Utilize o JSON Server Generator para criar um servidor JSON que simula uma API RESTful. Isso \u00e9 \u00fatil para prototipar dados que ser\u00e3o usados no banco de dados.</p>"},{"location":"4_modelagem_bd_models/#configuracao-do-ambiente","title":"Configura\u00e7\u00e3o do Ambiente","text":""},{"location":"4_modelagem_bd_models/#1-docker-compose-para-postgresql","title":"1. Docker Compose para PostgreSQL","text":"<p>Crie um arquivo <code>docker-compose.yml</code> para configurar um container PostgreSQL:</p> <pre><code>version: '3.1'\n\nservices:\n  db:\n    image: postgres:latest\n    restart: always\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: mydatabase\n    ports:\n      - \"5432:5432\"\n</code></pre>"},{"location":"4_modelagem_bd_models/#2-dbeaver","title":"2. DBeaver","text":"<ul> <li>Instala\u00e7\u00e3o e Configura\u00e7\u00e3o: Instale o DBeaver e configure uma nova conex\u00e3o com o PostgreSQL. O DBeaver \u00e9 uma ferramenta gr\u00e1fica que facilita a intera\u00e7\u00e3o com bancos de dados, permitindo executar comandos SQL e visualizar dados de forma intuitiva.</li> </ul>"},{"location":"4_modelagem_bd_models/#exemplos-de-sql","title":"Exemplos de SQL","text":""},{"location":"4_modelagem_bd_models/#1-ddl-data-definition-language","title":"1. DDL (Data Definition Language)","text":"<ul> <li>CREATE TABLE:</li> </ul> <pre><code>CREATE TABLE Alunos (\n    id SERIAL PRIMARY KEY,\n    nome VARCHAR(100),\n    curso_id INT\n);\n</code></pre> <ul> <li>ALTER TABLE:</li> </ul> <pre><code>ALTER TABLE Alunos ADD COLUMN email VARCHAR(100);\n</code></pre> <ul> <li>DROP TABLE:</li> </ul> <pre><code>DROP TABLE Alunos;\n</code></pre>"},{"location":"4_modelagem_bd_models/#2-dml-data-manipulation-language","title":"2. DML (Data Manipulation Language)","text":"<ul> <li>INSERT:</li> </ul> <pre><code>INSERT INTO Alunos (nome, curso_id) VALUES ('Jo\u00e3o Silva', 1);\n</code></pre> <ul> <li>SELECT:</li> </ul> <pre><code>SELECT * FROM Alunos;\n</code></pre> <ul> <li>UPDATE:</li> </ul> <pre><code>UPDATE Alunos SET email = 'joao.silva@example.com' WHERE id = 1;\n</code></pre> <ul> <li>DELETE:</li> </ul> <pre><code>DELETE FROM Alunos WHERE id = 1;\n</code></pre>"},{"location":"4_modelagem_bd_models/#3-crud-completo","title":"3. CRUD Completo","text":"<p>Para um CRUD completo, voc\u00ea pode seguir o seguinte fluxo:</p> <ul> <li>Create: Inserir novos registros.</li> <li>Read: Consultar registros existentes.</li> <li>Update: Atualizar registros existentes.</li> <li>Delete: Remover registros.</li> </ul> <p>Para ensinar conceitos como primary key, foreign key, joins, e rela\u00e7\u00f5es de 1 para N e N para N, podemos criar um exemplo pr\u00e1tico utilizando tabelas de um sistema acad\u00eamico. Vamos usar as tabelas de Cursos, Alunos, e Matr\u00edculas para ilustrar esses conceitos.</p>"},{"location":"4_modelagem_bd_models/#estrutura-das-tabelas","title":"Estrutura das Tabelas","text":""},{"location":"4_modelagem_bd_models/#criacao-das-tabelas","title":"Cria\u00e7\u00e3o das Tabelas","text":"<p>Vamos criar tr\u00eas tabelas: Cursos, Alunos, e Matr\u00edculas. As tabelas Cursos e Alunos ter\u00e3o uma chave prim\u00e1ria, enquanto a tabela Matr\u00edculas ser\u00e1 usada para representar uma rela\u00e7\u00e3o N para N entre Alunos e Cursos.</p> <pre><code>CREATE TABLE Cursos (\n    id SERIAL PRIMARY KEY,\n    nome VARCHAR(100)\n);\n\nCREATE TABLE Alunos (\n    id SERIAL PRIMARY KEY,\n    nome VARCHAR(100)\n);\n\nCREATE TABLE Matriculas (\n    aluno_id INT REFERENCES Alunos(id),\n    curso_id INT REFERENCES Cursos(id),\n    PRIMARY KEY (aluno_id, curso_id)\n);\n</code></pre>"},{"location":"4_modelagem_bd_models/#explicacao","title":"Explica\u00e7\u00e3o","text":"<ul> <li>Primary Key: A chave prim\u00e1ria \u00e9 um identificador \u00fanico para cada registro em uma tabela. Nas tabelas Cursos e Alunos, a coluna <code>id</code> \u00e9 a chave prim\u00e1ria.</li> <li>Foreign Key: A chave estrangeira \u00e9 usada para criar um relacionamento entre duas tabelas. Na tabela Matriculas, <code>aluno_id</code> e <code>curso_id</code> s\u00e3o chaves estrangeiras que referenciam as tabelas Alunos e Cursos, respectivamente.</li> </ul>"},{"location":"4_modelagem_bd_models/#insercao-de-dados","title":"Inser\u00e7\u00e3o de Dados","text":""},{"location":"4_modelagem_bd_models/#inserir-dados-em-varias-tabelas","title":"Inserir Dados em V\u00e1rias Tabelas","text":"<p>Vamos inserir dados nas tabelas Cursos, Alunos, e Matr\u00edculas.</p> <pre><code>-- Inserir dados na tabela Cursos\nINSERT INTO Cursos (nome) VALUES ('Matem\u00e1tica'), ('F\u00edsica'), ('Qu\u00edmica');\n\n-- Inserir dados na tabela Alunos\nINSERT INTO Alunos (nome) VALUES ('Jo\u00e3o Silva'), ('Maria Oliveira'), ('Carlos Souza');\n\n-- Inserir dados na tabela Matriculas\nINSERT INTO Matriculas (aluno_id, curso_id) VALUES \n(1, 1),  -- Jo\u00e3o Silva matriculado em Matem\u00e1tica\n(1, 2),  -- Jo\u00e3o Silva matriculado em F\u00edsica\n(2, 1),  -- Maria Oliveira matriculada em Matem\u00e1tica\n(3, 3);  -- Carlos Souza matriculado em Qu\u00edmica\n</code></pre>"},{"location":"4_modelagem_bd_models/#consultas-e-joins","title":"Consultas e Joins","text":""},{"location":"4_modelagem_bd_models/#exemplos-de-joins","title":"Exemplos de Joins","text":"<ul> <li>Inner Join: Retorna registros que t\u00eam correspond\u00eancias em ambas as tabelas.</li> </ul> <pre><code>SELECT Alunos.nome AS aluno, Cursos.nome AS curso\nFROM Matriculas\nJOIN Alunos ON Matriculas.aluno_id = Alunos.id\nJOIN Cursos ON Matriculas.curso_id = Cursos.id;\n</code></pre> <ul> <li>Left Join: Retorna todos os registros da tabela \u00e0 esquerda e os registros correspondentes da tabela \u00e0 direita.</li> </ul> <pre><code>SELECT Alunos.nome AS aluno, Cursos.nome AS curso\nFROM Alunos\nLEFT JOIN Matriculas ON Alunos.id = Matriculas.aluno_id\nLEFT JOIN Cursos ON Matriculas.curso_id = Cursos.id;\n</code></pre> <ul> <li>Right Join: Retorna todos os registros da tabela \u00e0 direita e os registros correspondentes da tabela \u00e0 esquerda.</li> </ul> <pre><code>SELECT Alunos.nome AS aluno, Cursos.nome AS curso\nFROM Cursos\nRIGHT JOIN Matriculas ON Cursos.id = Matriculas.curso_id\nRIGHT JOIN Alunos ON Matriculas.aluno_id = Alunos.id;\n</code></pre>"},{"location":"4_modelagem_bd_models/#relacoes-1-para-n-e-n-para-n","title":"Rela\u00e7\u00f5es 1 para N e N para N","text":"<ul> <li>1 para N: Um curso pode ter muitos alunos matriculados. Isso \u00e9 representado pela tabela Matriculas, onde um <code>curso_id</code> pode aparecer v\u00e1rias vezes.</li> <li>N para N: Um aluno pode estar matriculado em v\u00e1rios cursos, e um curso pode ter v\u00e1rios alunos. A tabela Matriculas representa essa rela\u00e7\u00e3o.</li> </ul> <p>Esses exemplos fornecem uma base s\u00f3lida para entender como modelar e consultar dados em um banco de dados relacional, utilizando conceitos fundamentais de SQL.</p>"},{"location":"4_modelagem_bd_models/#leituras-complementares","title":"Leituras Complementares","text":"<p>SQL commans (DDL, DQL, DML, DCL and TCL) Comprehensive Guide</p>"},{"location":"5_rotas_controllers/","title":"Rotas e Controllers","text":"<p>A Partir deste momento em diante \u00e9 100% code-along, ent\u00e3o estejam no seu replit para testarmos.</p>"},{"location":"5_rotas_controllers/#autoestudos","title":"Autoestudos","text":"Recurso Descri\u00e7\u00e3o Link Criando WebAPI Tutorial sobre como criar uma WebAPI com Node.js, Express e TypeScript Link API Rest, Node e Typescript V\u00eddeo sobre cria\u00e7\u00e3o de controller, tipagem de dados e melhorias no ESLINT Link Introdu\u00e7\u00e3o ao TS Artigo introdut\u00f3rio sobre TypeScript Link Configurando rotas no NodeJS com Typescript Tutorial sobre configura\u00e7\u00e3o de rotas em NodeJS com TypeScript Link Criando Controllers F\u00f3rum de discuss\u00e3o sobre cria\u00e7\u00e3o de controllers Link Routes, Controllers, Express, NodeJS V\u00eddeo sobre separa\u00e7\u00e3o de rotas e controllers em API Rest Express Link Curso NodeJS com Typescript V\u00eddeo sobre cria\u00e7\u00e3o de controller de usu\u00e1rios Link <p>Vamos atualizar o tutorial para incluir uma rota adicional no servidor para adicionar dados ao banco de dados, al\u00e9m de fornecer exemplos de comandos <code>curl</code> para testar as funcionalidades do backend.</p>"},{"location":"5_rotas_controllers/#atualizacao-do-projeto-com-rotas-adicionais-e-testes-com-curl","title":"Atualiza\u00e7\u00e3o do Projeto com Rotas Adicionais e Testes com <code>curl</code>","text":""},{"location":"5_rotas_controllers/#1-configuracao-basica-do-projeto","title":"1. Configura\u00e7\u00e3o B\u00e1sica do Projeto","text":"<p>Conforme descrito anteriormente, certifique-se de que voc\u00ea j\u00e1 tenha configurado o seu projeto TypeScript no Replit com as depend\u00eancias necess\u00e1rias:</p> <pre><code>npm install pg express\nnpm install --save-dev typescript @types/node @types/pg @types/express ts-node\n</code></pre> <p>Crie o <code>tsconfig.json</code></p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"module\": \"commonjs\",\n    \"rootDir\": \"./src\",\n    \"outDir\": \"./dist\",\n    \"strict\": true,\n    \"esModuleInterop\": true\n  },\n  \"include\": [\"src/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n</code></pre>"},{"location":"5_rotas_controllers/#2-atualizar-o-script-de-conexao-ao-banco-de-dados","title":"2. Atualizar o Script de Conex\u00e3o ao Banco de Dados","text":"<p>Certifique-se de que o arquivo <code>src/database.ts</code> contenha a configura\u00e7\u00e3o correta com SSL:</p> <pre><code>import { Pool } from 'pg';\n\n// Substitua pela sua string de conex\u00e3o do Render.com\nconst connectionString = 'sua_string_de_conexao_do_render_aqui';\n\nconst pool = new Pool({\n  connectionString,\n  ssl: {\n    rejectUnauthorized: false, // Permite conex\u00f5es SSL n\u00e3o autorizadas\n  }\n});\n\nexport default pool;\n</code></pre>"},{"location":"5_rotas_controllers/#3-script-de-migracao-para-criar-tabela","title":"3. Script de Migra\u00e7\u00e3o para Criar Tabela","text":"<p>Verifique se o arquivo <code>src/migrations/migrations.ts</code> est\u00e1 conforme abaixo para criar a tabela <code>users</code>:</p> <pre><code>import pool from '../database';\n\nconst createUsersTable = async () =&gt; {\n  const client = await pool.connect();\n  try {\n    const queryText = `\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(100) NOT NULL,\n        email VARCHAR(100) UNIQUE NOT NULL\n      );\n    `;\n    await client.query(queryText);\n    console.log('Tabela \"users\" criada com sucesso!');\n  } catch (err) {\n    console.error('Erro ao criar tabela:', err);\n  } finally {\n    client.release();\n  }\n};\n\ncreateUsersTable().then(() =&gt; process.exit(0));\n</code></pre> <p>Execute o script de migra\u00e7\u00e3o para garantir que a tabela seja criada:</p> <pre><code>npx ts-node src/migrations/migrations.ts\n</code></pre>"},{"location":"5_rotas_controllers/#4-adicionar-rotas-no-servidor","title":"4. Adicionar Rotas no Servidor","text":"<p>Atualize o arquivo <code>src/server.ts</code> para incluir rotas de obten\u00e7\u00e3o de usu\u00e1rios e de adi\u00e7\u00e3o de novos usu\u00e1rios:</p> <pre><code>import express from 'express';\nimport pool from './database';\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(express.json());\n\n// Rota para obter todos os usu\u00e1rios\napp.get('/users', async (req, res) =&gt; {\n  try {\n    const { rows } = await pool.query('SELECT * FROM users');\n    res.status(200).json(rows);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ error: 'Erro ao buscar usu\u00e1rios' });\n  }\n});\n\n// Rota para adicionar um novo usu\u00e1rio\napp.post('/users', async (req, res) =&gt; {\n  const { name, email } = req.body;\n  try {\n    const queryText = 'INSERT INTO users(name, email) VALUES($1, $2) RETURNING *';\n    const { rows } = await pool.query(queryText, [name, email]);\n    res.status(201).json(rows[0]);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ error: 'Erro ao adicionar usu\u00e1rio' });\n  }\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Servidor rodando na porta ${PORT}`);\n});\n</code></pre>"},{"location":"5_rotas_controllers/#5-executar-o-servidor","title":"5. Executar o Servidor","text":"<p>Execute o servidor:</p> <pre><code>npx ts-node src/server.ts\n</code></pre>"},{"location":"5_rotas_controllers/#6-testar-rotas-com-curl","title":"6. Testar Rotas com <code>curl</code>","text":"<p>Use os comandos <code>curl</code> abaixo para testar as rotas do backend.</p> <ul> <li>Testar a Rota <code>GET /users</code>:</li> </ul> <p>Execute este comando para buscar todos os usu\u00e1rios:</p> <pre><code>curl -X GET http://localhost:3000/users\n</code></pre> <p>Esse comando deve retornar uma lista de usu\u00e1rios armazenados no banco de dados.</p> <ul> <li>Testar a Rota <code>POST /users</code>:</li> </ul> <p>Execute este comando para adicionar um novo usu\u00e1rio:</p> <pre><code>curl -X POST http://localhost:3000/users -H \"Content-Type: application/json\" -d '{\"name\": \"Jo\u00e3o Silva\", \"email\": \"joao.silva@example.com\"}'\n</code></pre> <p>Esse comando deve adicionar um novo usu\u00e1rio ao banco de dados e retornar os dados do usu\u00e1rio rec\u00e9m-criado.</p>"},{"location":"5_rotas_controllers/#desafio","title":"Desafio","text":"<ol> <li>Agora entre no DBeaver, fa\u00e7a a conex\u00e3o e veja pelo dbeaver os dados inseridos.</li> <li>Fa\u00e7a o git commit e envie para o seu projeto no github.</li> </ol>"},{"location":"6_atividade_avaliativa_individual/","title":"Vamos Expandir as Rotas e Controllers!","text":""},{"location":"6_atividade_avaliativa_individual/#modularizando-um-projeto-nodejs-com-express-e-typescript","title":"Modularizando um Projeto Node.js com Express e TypeScript","text":"<p>Nesta aula, vamos modularizar o nosso projeto para separ\u00e1-lo em rotas, controllers e a configura\u00e7\u00e3o do banco de dados, proporcionando uma organiza\u00e7\u00e3o mais clara e facilitando a manuten\u00e7\u00e3o.</p>"},{"location":"6_atividade_avaliativa_individual/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<ol> <li> <p>Vamos criar tr\u00eas novas pastas:</p> <ul> <li><code>routes</code>: para definir as rotas da API.</li> <li><code>controllers</code>: para a l\u00f3gica de cada rota.</li> <li><code>config</code>: para a configura\u00e7\u00e3o do banco de dados.</li> </ul> </li> <li> <p>Reorganizaremos o c\u00f3digo do servidor, movendo as rotas, controllers e a configura\u00e7\u00e3o do banco de dados para arquivos separados.</p> </li> </ol>"},{"location":"6_atividade_avaliativa_individual/#estrutura-final-do-projeto","title":"Estrutura Final do Projeto","text":"<pre><code>src/\n\u2502\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 database.ts\n\u2502\n\u251c\u2500\u2500 controllers/\n\u2502   \u2514\u2500\u2500 userController.ts\n\u2502\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 userRoutes.ts\n\u2502\n\u251c\u2500\u2500 migrations/\n\u2502   \u2514\u2500\u2500 migrations.ts\n\u2502\n\u251c\u2500\u2500 server.ts\n</code></pre>"},{"location":"6_atividade_avaliativa_individual/#passos-para-modularizar-o-codigo","title":"Passos para Modularizar o C\u00f3digo","text":""},{"location":"6_atividade_avaliativa_individual/#1-configuracao-do-banco-de-dados-em-configdatabasets","title":"1. Configura\u00e7\u00e3o do Banco de Dados em <code>config/database.ts</code>","text":"<p>Vamos mover a configura\u00e7\u00e3o do banco de dados para a pasta <code>config</code>:</p> <pre><code>import { Pool } from 'pg';\n\n// Substitua pela sua string de conex\u00e3o do Render.com\nconst connectionString = 'sua_string_de_conexao_do_render_aqui';\n\nconst pool = new Pool({\n  connectionString,\n  ssl: {\n    rejectUnauthorized: false, // Permite conex\u00f5es SSL n\u00e3o autorizadas\n  }\n});\n\nexport default pool;\n</code></pre>"},{"location":"6_atividade_avaliativa_individual/#2-controllers-em-controllersusercontrollerts","title":"2. Controllers em <code>controllers/userController.ts</code>","text":"<p>Agora, a l\u00f3gica das rotas ser\u00e1 movida para o controller. Este arquivo lidar\u00e1 com as requisi\u00e7\u00f5es e intera\u00e7\u00f5es com o banco de dados:</p> <pre><code>import { Request, Response } from 'express';\nimport pool from '../config/database';\n\n// Fun\u00e7\u00e3o para obter todos os usu\u00e1rios\nexport const getUsers = async (req: Request, res: Response) =&gt; {\n  try {\n    const { rows } = await pool.query('SELECT * FROM users');\n    res.status(200).json(rows);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ error: 'Erro ao buscar usu\u00e1rios' });\n  }\n};\n\n// Fun\u00e7\u00e3o para adicionar um novo usu\u00e1rio\nexport const addUser = async (req: Request, res: Response) =&gt; {\n  const { name, email } = req.body;\n  try {\n    const queryText = 'INSERT INTO users(name, email) VALUES($1, $2) RETURNING *';\n    const { rows } = await pool.query(queryText, [name, email]);\n    res.status(201).json(rows[0]);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ error: 'Erro ao adicionar usu\u00e1rio' });\n  }\n};\n</code></pre>"},{"location":"6_atividade_avaliativa_individual/#3-rotas-em-routesuserroutests","title":"3. Rotas em <code>routes/userRoutes.ts</code>","text":"<p>As rotas ser\u00e3o movidas para a pasta <code>routes</code>. Aqui, simplesmente vincularemos as rotas com seus respectivos controllers:</p> <pre><code>import { Router } from 'express';\nimport { getUsers, addUser } from '../controllers/userController';\n\nconst router = Router();\n\nrouter.get('/users', getUsers);\nrouter.post('/users', addUser);\n\nexport default router;\n</code></pre>"},{"location":"6_atividade_avaliativa_individual/#4-atualizacao-do-servidor-em-srcserverts","title":"4. Atualiza\u00e7\u00e3o do Servidor em <code>src/server.ts</code>","text":"<p>Agora vamos atualizar o arquivo do servidor para utilizar as novas rotas:</p> <pre><code>import express from 'express';\nimport userRoutes from './routes/userRoutes';\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(express.json());\n\n// Utilizando as rotas de usu\u00e1rios\napp.use(userRoutes);\n\napp.listen(PORT, () =&gt; {\n  console.log(`Servidor rodando na porta ${PORT}`);\n});\n</code></pre>"},{"location":"6_atividade_avaliativa_individual/#5-script-de-migracao-para-criar-tabela-em-migrationsmigrationsts","title":"5. Script de Migra\u00e7\u00e3o para Criar Tabela em <code>migrations/migrations.ts</code>","text":"<p>Aqui n\u00e3o haver\u00e1 mudan\u00e7a. Certifique-se de executar a migra\u00e7\u00e3o corretamente:</p> <pre><code>import pool from '../config/database';\n\nconst createUsersTable = async () =&gt; {\n  const client = await pool.connect();\n  try {\n    const queryText = `\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(100) NOT NULL,\n        email VARCHAR(100) UNIQUE NOT NULL\n      );\n    `;\n    await client.query(queryText);\n    console.log('Tabela \"users\" criada com sucesso!');\n  } catch (err) {\n    console.error('Erro ao criar tabela:', err);\n  } finally {\n    client.release();\n  }\n};\n\ncreateUsersTable().then(() =&gt; process.exit(0));\n</code></pre>"},{"location":"6_atividade_avaliativa_individual/#6-executar-o-servidor","title":"6. Executar o Servidor","text":"<p>Agora, vamos executar o servidor com o comando:</p> <pre><code>npx ts-node src/server.ts\n</code></pre>"},{"location":"6_atividade_avaliativa_individual/#7-testar-rotas-com-curl","title":"7. Testar Rotas com <code>curl</code>","text":"<p>Use os comandos <code>curl</code> abaixo para testar as rotas.</p> <ul> <li>Testar a Rota <code>GET /users</code>:</li> </ul> <pre><code>curl -X GET http://localhost:3000/users\n</code></pre> <ul> <li>Testar a Rota <code>POST /users</code>:</li> </ul> <pre><code>curl -X POST http://localhost:3000/users -H \"Content-Type: application/json\" -d '{\"name\": \"Jo\u00e3o Silva\", \"email\": \"joao.silva@example.com\"}'\n</code></pre>"},{"location":"6_atividade_avaliativa_individual/#agora-e-com-voce-leia-o-tutorial-e-faca-a-aplicacao-modularizada-em-camadas","title":"Agora \u00e9 com voc\u00ea, leia o tutorial e fa\u00e7a a aplica\u00e7\u00e3o modularizada em camadas.","text":""},{"location":"7_queries_sql_avancadas/","title":"Queries SQLs Avan\u00e7adas em Banco de Dados (Padr\u00e3o Repository)","text":"<p>Vamos expandir o conte\u00fado da aula anterior, adicionando o uso de models e repositories para uma maior separa\u00e7\u00e3o de responsabilidades, seguindo boas pr\u00e1ticas de design.</p>"},{"location":"7_queries_sql_avancadas/#modularizando-com-models-e-repositories","title":"Modularizando com Models e Repositories","text":"<p>Agora, vamos incluir o padr\u00e3o repository para lidar com a l\u00f3gica de acesso ao banco de dados, enquanto os models representar\u00e3o os dados que manipulamos.</p>"},{"location":"7_queries_sql_avancadas/#nova-estrutura-do-projeto","title":"Nova Estrutura do Projeto","text":"<ol> <li> <p>Vamos adicionar duas novas pastas:</p> <ul> <li><code>models</code>: para definir os esquemas de dados.</li> <li><code>repositories</code>: para manipula\u00e7\u00e3o dos dados no banco.</li> </ul> </li> <li> <p>A estrutura final do projeto ficar\u00e1 assim:</p> </li> </ol> <pre><code>src/\n\u2502\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 database.ts\n\u2502\n\u251c\u2500\u2500 controllers/\n\u2502   \u2514\u2500\u2500 userController.ts\n\u2502\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 userModel.ts\n\u2502\n\u251c\u2500\u2500 repositories/\n\u2502   \u2514\u2500\u2500 userRepository.ts\n\u2502\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 userRoutes.ts\n\u2502\n\u251c\u2500\u2500 migrations/\n\u2502   \u2514\u2500\u2500 migrations.ts\n\u2502\n\u251c\u2500\u2500 server.ts\n</code></pre>"},{"location":"7_queries_sql_avancadas/#passos-para-implementacao-de-models-e-repositories","title":"Passos para Implementa\u00e7\u00e3o de Models e Repositories","text":""},{"location":"7_queries_sql_avancadas/#1-definindo-o-model-em-modelsusermodelts","title":"1. Definindo o Model em <code>models/userModel.ts</code>","text":"<p>O model vai representar a estrutura dos nossos dados. Vamos criar um modelo simples para o usu\u00e1rio:</p> <pre><code>export interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n</code></pre>"},{"location":"7_queries_sql_avancadas/#2-implementando-o-repositorio-em-repositoriesuserrepositoryts","title":"2. Implementando o Reposit\u00f3rio em <code>repositories/userRepository.ts</code>","text":"<p>O repository vai concentrar a l\u00f3gica de intera\u00e7\u00e3o com o banco de dados, isolando a camada de acesso ao banco do restante da aplica\u00e7\u00e3o:</p> <pre><code>import { Pool } from 'pg';\nimport pool from '../config/database';\nimport { User } from '../models/userModel';\n\nexport class UserRepository {\n  private pool: Pool;\n\n  constructor() {\n    this.pool = pool;\n  }\n\n  // M\u00e9todo para buscar todos os usu\u00e1rios\n  async getAllUsers(): Promise&lt;User[]&gt; {\n    const { rows } = await this.pool.query('SELECT * FROM users');\n    return rows;\n  }\n\n  // M\u00e9todo para adicionar um novo usu\u00e1rio\n  async addUser(name: string, email: string): Promise&lt;User&gt; {\n    const queryText = 'INSERT INTO users(name, email) VALUES($1, $2) RETURNING *';\n    const { rows } = await this.pool.query(queryText, [name, email]);\n    return rows[0];\n  }\n}\n</code></pre>"},{"location":"7_queries_sql_avancadas/#3-atualizando-o-controller-em-controllersusercontrollerts","title":"3. Atualizando o Controller em <code>controllers/userController.ts</code>","text":"<p>Agora, o controller utilizar\u00e1 o UserRepository para manipular os dados:</p> <pre><code>import { Request, Response } from 'express';\nimport { UserRepository } from '../repositories/userRepository';\n\nconst userRepository = new UserRepository();\n\nexport const getUsers = async (req: Request, res: Response) =&gt; {\n  try {\n    const users = await userRepository.getAllUsers();\n    res.status(200).json(users);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ error: 'Erro ao buscar usu\u00e1rios' });\n  }\n};\n\nexport const addUser = async (req: Request, res: Response) =&gt; {\n  const { name, email } = req.body;\n  try {\n    const user = await userRepository.addUser(name, email);\n    res.status(201).json(user);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ error: 'Erro ao adicionar usu\u00e1rio' });\n  }\n};\n</code></pre>"},{"location":"7_queries_sql_avancadas/#4-mantendo-as-rotas-em-routesuserroutests","title":"4. Mantendo as Rotas em <code>routes/userRoutes.ts</code>","text":"<p>As rotas permanecem simples, sem mudan\u00e7as:</p> <pre><code>import { Router } from 'express';\nimport { getUsers, addUser } from '../controllers/userController';\n\nconst router = Router();\n\nrouter.get('/users', getUsers);\nrouter.post('/users', addUser);\n\nexport default router;\n</code></pre>"},{"location":"7_queries_sql_avancadas/#5-servidor-e-migrations","title":"5. Servidor e Migrations","text":"<p>Nenhuma altera\u00e7\u00e3o no servidor ou nas migra\u00e7\u00f5es, mas aqui est\u00e3o os arquivos para refer\u00eancia:</p> <ul> <li>Servidor: <code>src/server.ts</code></li> </ul> <pre><code>import express from 'express';\nimport userRoutes from './routes/userRoutes';\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(express.json());\n\n// Utilizando as rotas de usu\u00e1rios\napp.use(userRoutes);\n\napp.listen(PORT, () =&gt; {\n  console.log(`Servidor rodando na porta ${PORT}`);\n});\n</code></pre> <ul> <li>Migra\u00e7\u00f5es: <code>migrations/migrations.ts</code></li> </ul> <pre><code>import pool from '../config/database';\n\nconst createUsersTable = async () =&gt; {\n  const client = await pool.connect();\n  try {\n    const queryText = `\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(100) NOT NULL,\n        email VARCHAR(100) UNIQUE NOT NULL\n      );\n    `;\n    await client.query(queryText);\n    console.log('Tabela \"users\" criada com sucesso!');\n  } catch (err) {\n    console.error('Erro ao criar tabela:', err);\n  } finally {\n    client.release();\n  }\n};\n\ncreateUsersTable().then(() =&gt; process.exit(0));\n</code></pre>"},{"location":"7_queries_sql_avancadas/#6-testar-o-projeto","title":"6. Testar o Projeto","text":"<p>Para testar o projeto modularizado com models e repositories, utilize os mesmos comandos <code>curl</code> da aula anterior:</p> <ul> <li>GET /users:</li> </ul> <pre><code>curl -X GET http://localhost:3000/users\n</code></pre> <ul> <li>POST /users:</li> </ul> <pre><code>curl -X POST http://localhost:3000/users -H \"Content-Type: application/json\" -d '{\"name\": \"Maria\", \"email\": \"maria@example.com\"}'\n</code></pre> <p>Com isso, seu projeto estar\u00e1 organizado em camadas, facilitando a manuten\u00e7\u00e3o, expans\u00e3o e reutiliza\u00e7\u00e3o dos componentes!</p> <p>Agora \u00e9 sua vez de implementar o padr\u00e3o com models e repositories no seu projeto.</p>"},{"location":"8_helpers_camadas_auxiliares_mvc/","title":"Helpers e Camadas Auxiliares do MVC","text":"<p>Link para a aula: Link</p>"},{"location":"9_avaliacao_multidisciplinar/","title":"Avalia\u00e7\u00e3o Multidisciplinar","text":""},{"location":"9_avaliacao_multidisciplinar/#topicos","title":"T\u00f3picos:","text":"<ul> <li>Teste desafio pr\u00e1tico de Docker e Filas (2,5 pontos)</li> </ul>"},{"location":"calendario/","title":"Calend\u00e1rio","text":""},{"location":"tutorial_mvc/","title":"Tutorial MVC com Typescript","text":""},{"location":"tutorial_mvc/#videoaula","title":"V\u00eddeoAula","text":""},{"location":"tutorial_mvc/#1-configuracao-do-ambiente","title":"1. Configura\u00e7\u00e3o do Ambiente","text":"<ol> <li> <p>Instale o Node.js e npm: Certifique-se de ter o Node.js e o npm instalados no seu sistema. Voc\u00ea pode baix\u00e1-los aqui.</p> </li> <li> <p>Crie um novo projeto: Abra o terminal e crie uma nova pasta para o seu projeto.</p> </li> </ol> <pre><code>mkdir meu-projeto-mvc\ncd meu-projeto-mvc\nnpm init -y\n</code></pre> <ol> <li>Instale as depend\u00eancias necess\u00e1rias:</li> </ol> <pre><code>npm install express typescript ts-node @types/node @types/express\n</code></pre> <ol> <li>Configure o TypeScript: Crie um arquivo <code>tsconfig.json</code> na raiz do projeto com o seguinte conte\u00fado:</li> </ol> <pre><code>{\n    \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"outDir\": \"./dist\"\n    },\n    \"include\": [\"src/**/*\"],\n    \"exclude\": [\"node_modules\"]\n}\n</code></pre>"},{"location":"tutorial_mvc/#2-estrutura-do-projeto","title":"2. Estrutura do Projeto","text":"<p>Crie a seguinte estrutura de pastas e arquivos no seu projeto:</p> <pre><code>meu-projeto-mvc/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u2514\u2500\u2500 userController.ts\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2514\u2500\u2500 userModel.ts\n\u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u2514\u2500\u2500 userRoutes.ts\n\u2502   \u251c\u2500\u2500 views/\n\u2502   \u2502   \u2514\u2500\u2500 userView.ts\n\u2502   \u251c\u2500\u2500 app.ts\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 package.json\n</code></pre>"},{"location":"tutorial_mvc/#3-implementacao","title":"3. Implementa\u00e7\u00e3o","text":""},{"location":"tutorial_mvc/#srcappts","title":"<code>src/app.ts</code>","text":"<p>Este \u00e9 o ponto de entrada do seu aplicativo.</p> <pre><code>import express from 'express';\nimport userRoutes from './routes/userRoutes';\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\napp.use('/users', userRoutes);\n\napp.listen(port, () =&gt; {\n  console.log(`Server is running on http://localhost:${port}`);\n});\n</code></pre>"},{"location":"tutorial_mvc/#srcmodelsusermodelts","title":"<code>src/models/userModel.ts</code>","text":"<p>Aqui voc\u00ea define a estrutura dos dados.</p> <pre><code>export interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nexport const users: User[] = [];\n</code></pre>"},{"location":"tutorial_mvc/#srccontrollersusercontrollerts","title":"<code>src/controllers/userController.ts</code>","text":"<p>Aqui voc\u00ea implementa a l\u00f3gica de neg\u00f3cios.</p> <pre><code>import { Request, Response } from 'express';\nimport { users, User } from '../models/userModel';\n\nexport const getUsers = (req: Request, res: Response): void =&gt; {\n  res.json(users);\n};\n\nexport const createUser = (req: Request, res: Response): void =&gt; {\n  const newUser: User = {\n    id: users.length + 1,\n    ...req.body\n  };\n  users.push(newUser);\n  res.status(201).json(newUser);\n};\n</code></pre>"},{"location":"tutorial_mvc/#srcroutesuserroutests","title":"<code>src/routes/userRoutes.ts</code>","text":"<p>Aqui voc\u00ea define as rotas do seu aplicativo.</p> <pre><code>import { Router } from 'express';\nimport { getUsers, createUser } from '../controllers/userController';\n\nconst router = Router();\n\nrouter.get('/', getUsers);\nrouter.post('/', createUser);\n\nexport default router;\n</code></pre>"},{"location":"tutorial_mvc/#srcviewsuserviewts","title":"<code>src/views/userView.ts</code>","text":"<p>Neste exemplo simples, a camada de visualiza\u00e7\u00e3o pode ser omitida ou usada para formatar a sa\u00edda de dados. Em um ambiente mais complexo, voc\u00ea pode usar templates.</p>"},{"location":"tutorial_mvc/#4-executando-o-projeto","title":"4. Executando o Projeto","text":"<p>Para rodar seu projeto, adicione um script no <code>package.json</code>:</p> <pre><code>\"scripts\": {\n  \"start\": \"ts-node src/app.ts\"\n}\n</code></pre> <p>Ent\u00e3o, no terminal, execute:</p> <pre><code>npm start\n</code></pre>"},{"location":"tutorial_mvc/#5-testando-com-o-restclient-no-vscode","title":"5. Testando com o RestClient no VSCode","text":"<p>Para testar sua API, voc\u00ea pode usar a extens\u00e3o RestClient no VSCode. Crie um arquivo <code>requests.http</code> na raiz do projeto com o seguinte conte\u00fado:</p> <pre><code>### Get all users\nGET http://localhost:3000/users\nContent-Type: application/json\n\n###\n\n### Create a new user\nPOST http://localhost:3000/users\nContent-Type: application/json\n\n{\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n}\n</code></pre> <p>Para realizar os testes, basta abrir o arquivo <code>requests.http</code> no VSCode e clicar no bot\u00e3o \"Send Request\" que aparece acima de cada bloco de requisi\u00e7\u00e3o.</p>"},{"location":"tutorial_mvc/#6-adicionando-um-gitignore","title":"6. Adicionando um .gitignore","text":"<p>Crie um arquivo <code>.gitignore</code> na raiz do projeto com o seguinte conte\u00fado para ignorar arquivos e pastas desnecess\u00e1rias:</p> <pre><code># Node modules\nnode_modules/\n\n# TypeScript output\ndist/\n\n# Environment variables\n.env\n\n# Logs\nlogs/\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Editor directories and files\n.vscode/\n.idea/\n.DS_Store\n</code></pre>"}]}